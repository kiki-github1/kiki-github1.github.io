<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kikiのblog</title>
  
  
  <link href="https://kiki-github1.github.io/atom.xml" rel="self"/>
  
  <link href="https://kiki-github1.github.io/"/>
  <updated>2022-01-16T05:44:29.297Z</updated>
  <id>https://kiki-github1.github.io/</id>
  
  <author>
    <name>kiki</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>双链表的增删改查</title>
    <link href="https://kiki-github1.github.io/2022/01/16/%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    <id>https://kiki-github1.github.io/2022/01/16/%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</id>
    <published>2022-01-16T05:41:37.000Z</published>
    <updated>2022-01-16T05:44:29.297Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DulNode</span>&#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="comment">//尾结点 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DulNode</span> *<span class="title">next</span>;</span></span><br><span class="line"><span class="comment">//头结点 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DulNode</span> *<span class="title">proir</span>;</span></span><br><span class="line">&#125;DulNode,*DuLinkList; </span><br><span class="line"></span><br><span class="line"><span class="comment">//头插法创建链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createLinkList</span><span class="params">(DuLinkList &amp;L,<span class="keyword">int</span> a[],<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">DuLinkList s;</span><br><span class="line"><span class="comment">//创建头结点</span></span><br><span class="line">L = (DuLinkList)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(DulNode));</span><br><span class="line"><span class="comment">//初始化结点 </span></span><br><span class="line">L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">L-&gt;proir = <span class="literal">NULL</span>;</span><br><span class="line">L-&gt;data = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//创建p方便操作 </span></span><br><span class="line">DuLinkList p =L;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123; </span><br><span class="line">s = (DuLinkList)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(DulNode));</span><br><span class="line">s-&gt;data = a[i];</span><br><span class="line">s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">s-&gt;proir = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//尾插法</span></span><br><span class="line">p-&gt;next = s;</span><br><span class="line">s-&gt;proir = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//预览函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(DuLinkList L)</span></span>&#123;</span><br><span class="line">DuLinkList p = L-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">cout &lt;&lt; p-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt;endl; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">//增加结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(DuLinkList L,ElemType e)</span></span>&#123;</span><br><span class="line">DuLinkList p = L-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(p-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">DuLinkList s;</span><br><span class="line">s = (DuLinkList)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(DulNode));</span><br><span class="line">s-&gt;data = e;</span><br><span class="line">s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">s-&gt;proir = <span class="literal">NULL</span>;</span><br><span class="line">p-&gt;next = s;</span><br><span class="line">s-&gt;proir = p;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//删除结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(DuLinkList &amp;L,ElemType &amp;e)</span></span>&#123;</span><br><span class="line">DuLinkList p = L,q=p-&gt;next;</span><br><span class="line"><span class="comment">//寻找到删除结点的前一个结点 </span></span><br><span class="line"><span class="keyword">while</span>(q!=<span class="literal">NULL</span> &amp;&amp; q-&gt;data!=e)&#123;</span><br><span class="line">p = q;</span><br><span class="line">q = q-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line">q-&gt;next-&gt;proir = p;</span><br><span class="line"><span class="built_in">free</span>(q);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//修改结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(DuLinkList &amp;L,<span class="keyword">int</span> pos,ElemType e)</span></span>&#123;</span><br><span class="line">DuLinkList p=L-&gt;next,s;</span><br><span class="line">pos = pos<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;pos;i++)&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;;</span><br><span class="line">s = (DuLinkList)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(DulNode));</span><br><span class="line">s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">s-&gt;proir = <span class="literal">NULL</span>;</span><br><span class="line">s-&gt;data = e;</span><br><span class="line"></span><br><span class="line">DuLinkList q = p-&gt;proir;</span><br><span class="line">q-&gt;next=s;</span><br><span class="line">s-&gt;proir = q;</span><br><span class="line">s-&gt;next = p;</span><br><span class="line">p-&gt;proir = s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//查询结点 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetElem</span><span class="params">(DuLinkList &amp;L,<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">DuLinkList p=L;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;pos;i++)&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">DuLinkList L;</span><br><span class="line">ElemType e=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">4</span>] = &#123;<span class="number">2</span>,<span class="number">32</span>,<span class="number">34</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="built_in">createLinkList</span>(L,a,<span class="number">4</span>);</span><br><span class="line"><span class="built_in">show</span>(L);</span><br><span class="line"><span class="comment">//添加测试</span></span><br><span class="line"><span class="built_in">add</span>(L,<span class="number">34</span>);</span><br><span class="line"><span class="built_in">show</span>(L); </span><br><span class="line"><span class="comment">//删除测试 </span></span><br><span class="line"><span class="built_in">Delete</span>(L,e);</span><br><span class="line"><span class="built_in">show</span>(L);</span><br><span class="line"><span class="comment">//修改测试 </span></span><br><span class="line"><span class="comment">//插入操作 </span></span><br><span class="line"><span class="built_in">insert</span>(L,<span class="number">2</span>,<span class="number">999</span>);</span><br><span class="line"><span class="built_in">insert</span>(L,<span class="number">4</span>,<span class="number">8888</span>);</span><br><span class="line"><span class="built_in">show</span>(L);</span><br><span class="line"><span class="comment">// 查询测试</span></span><br><span class="line"> cout &lt;&lt; <span class="built_in">GetElem</span>(L,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><ul><li>实现了双链表的定义。</li><li>实现了基本的增删改查功能。</li><li>注意：对于初始化结点的时候，___要对结点的指针进行赋值___。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;代码实现&quot;&gt;&lt;a href=&quot;#代码实现&quot; class=&quot;headerlink&quot; title=&quot;代码实现&quot;&gt;&lt;/a&gt;代码实现&lt;/h1&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>顺序表的动态形式</title>
    <link href="https://kiki-github1.github.io/2022/01/12/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E5%8A%A8%E6%80%81%E5%BD%A2%E5%BC%8F/"/>
    <id>https://kiki-github1.github.io/2022/01/12/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E5%8A%A8%E6%80%81%E5%BD%A2%E5%BC%8F/</id>
    <published>2022-01-12T12:52:11.000Z</published>
    <updated>2022-01-14T03:24:58.271Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INIT_SIZE 5</span></span><br><span class="line"><span class="comment">//顺序表的动态形式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建结构体(带有指针） </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">ElemType *data;</span><br><span class="line"><span class="keyword">int</span> Maxsize,length;</span><br><span class="line">&#125;SqList; </span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化顺序表 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(SqList &amp;L)</span></span>&#123;</span><br><span class="line"><span class="comment">//创建空间初始化 </span></span><br><span class="line"> L.data = (ElemType *)<span class="built_in">malloc</span>(INIT_SIZE * <span class="built_in"><span class="keyword">sizeof</span></span>(ElemType));</span><br><span class="line"> L.length = <span class="number">0</span>;</span><br><span class="line"> L.Maxsize = INIT_SIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//是否为空 </span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isempty</span><span class="params">(SqList L)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> L.length==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建顺序表 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createList</span><span class="params">(SqList &amp;L,<span class="keyword">int</span> a[],<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line"><span class="comment">//如果超过容量，就进行扩容</span></span><br><span class="line"><span class="keyword">if</span>(len &gt; L.Maxsize)&#123;</span><br><span class="line">ElemType *newbase = (ElemType *)<span class="built_in">realloc</span>(L.data,(L.Maxsize+<span class="number">10</span>)*<span class="built_in"><span class="keyword">sizeof</span></span>(ElemType));</span><br><span class="line">L.data = newbase;</span><br><span class="line">L.Maxsize+=<span class="number">10</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">L.data[i] = a[i];</span><br><span class="line">L.length++;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加方法 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(SqList &amp;L,ElemType e)</span></span>&#123;</span><br><span class="line">L.data[L.length] = e;</span><br><span class="line">L.length++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除方法 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delet</span><span class="params">(SqList &amp;L,ElemType &amp;e)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(L.data[i]!=e)&#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i;i&lt;L.length;i++)&#123;</span><br><span class="line">L.data[i]=L.data[i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">L.length--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入方法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insertList</span><span class="params">(SqList &amp;L,<span class="keyword">int</span> pos,ElemType e)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(pos&lt;<span class="number">0</span> || pos &gt; L.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">pos = pos<span class="number">-1</span>;</span><br><span class="line">L.length++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=L.length<span class="number">-1</span>;i&gt;=pos;i--)&#123;</span><br><span class="line">L.data[i] = L.data[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">L.data[pos] = e;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//预览函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(SqList L)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,L.data[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试函数 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>] = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">67</span>,<span class="number">34</span>&#125;;</span><br><span class="line">SqList L;</span><br><span class="line">ElemType e;</span><br><span class="line"><span class="built_in">init</span>(L);</span><br><span class="line"><span class="built_in">createList</span>(L,a,<span class="number">10</span>);</span><br><span class="line"><span class="built_in">show</span>(L);</span><br><span class="line"><span class="built_in">add</span>(L,<span class="number">3242</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">show</span>(L);</span><br><span class="line">e = <span class="number">34</span>;</span><br><span class="line"><span class="built_in">delet</span>(L,e);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">show</span>(L);</span><br><span class="line"><span class="built_in">insertList</span>(L,<span class="number">2</span>,<span class="number">666</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">show</span>(L);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>动态的顺序表：</p><ul><li>优点：</li></ul><p>是对静态顺序表的进一步优化。</p><p>可以动态的进行扩容处理。</p><p>使用Maxsize,来定义存储空间的大小，通过remalloc事项了动态的扩容，</p><ul><li>缺点：</li></ul><p>但是扩容处理消耗过大。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>顺序表的静态形式</title>
    <link href="https://kiki-github1.github.io/2022/01/12/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E9%9D%99%E6%80%81%E5%BD%A2%E5%BC%8F/"/>
    <id>https://kiki-github1.github.io/2022/01/12/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E9%9D%99%E6%80%81%E5%BD%A2%E5%BC%8F/</id>
    <published>2022-01-12T12:51:53.000Z</published>
    <updated>2022-01-12T13:31:03.721Z</updated>
    
    <content type="html"><![CDATA[<h1 id="顺序表的静态实习方式"><a href="#顺序表的静态实习方式" class="headerlink" title="顺序表的静态实习方式"></a>顺序表的静态实习方式</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Maxsize 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="comment">//顺序表的静态形式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建结构体 </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">ElemType data[Maxsize];</span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line">&#125;SqList; </span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化顺序表 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(SqList &amp;L)</span></span>&#123;</span><br><span class="line">L.length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//是否为空 </span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isempty</span><span class="params">(SqList L)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> L.length==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建顺序表 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createList</span><span class="params">(SqList &amp;L,<span class="keyword">int</span> a[],<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">L.data[i] = a[i];</span><br><span class="line">L.length++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加方法 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(SqList &amp;L,ElemType e)</span></span>&#123;</span><br><span class="line">L.data[L.length] = e;</span><br><span class="line">L.length++;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//删除方法 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delet</span><span class="params">(SqList &amp;L,ElemType &amp;e)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(L.data[i]!=e)&#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i;i&lt;L.length;i++)&#123;</span><br><span class="line">L.data[i]=L.data[i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">L.length--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入方法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insertList</span><span class="params">(SqList &amp;L,<span class="keyword">int</span> pos,ElemType e)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(pos&lt;<span class="number">0</span> || pos &gt; L.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">pos = pos<span class="number">-1</span>;</span><br><span class="line">L.length++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=L.length<span class="number">-1</span>;i&gt;=pos;i--)&#123;</span><br><span class="line">L.data[i] = L.data[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">L.data[pos] = e;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//预览函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(SqList L)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,L.data[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//测试函数 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>] = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">67</span>,<span class="number">34</span>&#125;;</span><br><span class="line">SqList L;</span><br><span class="line">ElemType e;</span><br><span class="line"><span class="built_in">init</span>(L);</span><br><span class="line"><span class="built_in">createList</span>(L,a,<span class="number">10</span>);</span><br><span class="line"><span class="built_in">show</span>(L);</span><br><span class="line"><span class="built_in">add</span>(L,<span class="number">3242</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">show</span>(L);</span><br><span class="line">e = <span class="number">34</span>;</span><br><span class="line"><span class="built_in">delet</span>(L,e);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">show</span>(L);</span><br><span class="line"><span class="built_in">insertList</span>(L,<span class="number">2</span>,<span class="number">666</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">show</span>(L);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>优点：</p><p>对于查询数据方便</p></li><li><p>缺点：</p><p>不利于删除和添加，修改，长度使用的容量是固定的(通过实现动态化，使得可以进行扩容)。</p><h1 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h1><p><img src="C:\Users\hn\AppData\Roaming\Typora\typora-user-images\image-20220112205929168.png" alt="image-20220112205929168"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;顺序表的静态实习方式&quot;&gt;&lt;a href=&quot;#顺序表的静态实习方式&quot; class=&quot;headerlink&quot; title=&quot;顺序表的静态实习方式&quot;&gt;&lt;/a&gt;顺序表的静态实习方式&lt;/h1&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>单链表的动态形式</title>
    <link href="https://kiki-github1.github.io/2022/01/07/%E9%93%BE%E8%A1%A8%E7%9A%84%E5%8A%A8%E6%80%81%E8%A1%A8%E7%A4%BA/"/>
    <id>https://kiki-github1.github.io/2022/01/07/%E9%93%BE%E8%A1%A8%E7%9A%84%E5%8A%A8%E6%80%81%E8%A1%A8%E7%A4%BA/</id>
    <published>2022-01-07T05:46:57.000Z</published>
    <updated>2022-01-15T04:58:24.181Z</updated>
    
    <content type="html"><![CDATA[<h1 id="链表的动态表示形式"><a href="#链表的动态表示形式" class="headerlink" title="链表的动态表示形式"></a>链表的动态表示形式</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//定义自己的数据类型 </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="comment">//定义结构体 </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line"><span class="comment">//数据 </span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="comment">//指针 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList; </span><br><span class="line"></span><br><span class="line"><span class="comment">//创建函数头插法 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createList</span><span class="params">(LinkList &amp;L,<span class="keyword">int</span> a[],<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line"><span class="comment">//创建头结点</span></span><br><span class="line">L = (LinkList)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LNode));</span><br><span class="line">L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//创建插入节点</span></span><br><span class="line">LinkList s;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i;i&lt;len;i++)&#123;</span><br><span class="line"><span class="comment">//分配地址 </span></span><br><span class="line">s = (LinkList)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LNode));</span><br><span class="line">s-&gt;next = L-&gt;next;</span><br><span class="line">L-&gt;next = s;</span><br><span class="line">s-&gt;data = a[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//预览函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line">LinkList p = L-&gt;next;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">cout &lt;&lt; p-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//添加函数,l利用头插法 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(LinkList &amp;L,ElemType e)</span></span>&#123;</span><br><span class="line">LinkList s;</span><br><span class="line">s = (LinkList)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LNode));</span><br><span class="line">s-&gt;data = e;</span><br><span class="line">s-&gt;next = L-&gt;next;</span><br><span class="line">L-&gt;next = s;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//删除第一个为e的</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteList</span><span class="params">(LinkList &amp;L,<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">LinkList p = L;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;pos<span class="number">-1</span>;i++)&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">LinkList q = p-&gt;next;</span><br><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(q);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//获取第i个数据</span></span><br><span class="line"><span class="function">ElemType <span class="title">GetElem</span><span class="params">(LinkList &amp;L,<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">LinkList p = L;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;pos;i++)&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; p-&gt;data &lt;&lt; endl;</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="comment">//修改第i个的</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">change</span><span class="params">(LinkList &amp;L,<span class="keyword">int</span> pos,ElemType e)</span></span>&#123;</span><br><span class="line">LinkList p = L-&gt;next;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;pos<span class="number">-1</span>;i++)&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">p-&gt;data = e;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//创建链表和元素</span></span><br><span class="line">LinkList L;</span><br><span class="line">ElemType e;</span><br><span class="line">    <span class="comment">//初始化用到的数组</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">8</span>] = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">56</span>,<span class="number">34</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">89</span>&#125;;</span><br><span class="line">    <span class="comment">//创建链表</span></span><br><span class="line"><span class="built_in">createList</span>(L,a,<span class="number">8</span>);</span><br><span class="line"><span class="built_in">show</span>(L);</span><br><span class="line">    <span class="comment">//添加元素</span></span><br><span class="line"><span class="built_in">add</span>(L,<span class="number">8848</span>);</span><br><span class="line"><span class="built_in">show</span>(L);</span><br><span class="line">    <span class="comment">//删除元素</span></span><br><span class="line"><span class="built_in">deleteList</span>(L,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">show</span>(L);</span><br><span class="line">    <span class="comment">//获取元素，根据指定的位置</span></span><br><span class="line"><span class="built_in">GetElem</span>(L,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">show</span>(L);</span><br><span class="line">    <span class="comment">//修改对应位置的元素</span></span><br><span class="line"><span class="built_in">change</span>(L,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"><span class="built_in">show</span>(L);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>优点：</p><p>方便修改，和添加。比较方便。</p></li><li><p>缺点：</p><p>不利于查询，需要遍历前面的表才能查到。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;链表的动态表示形式&quot;&gt;&lt;a href=&quot;#链表的动态表示形式&quot; class=&quot;headerlink&quot; title=&quot;链表的动态表示形式&quot;&gt;&lt;/a&gt;链表的动态表示形式&lt;/h1&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>关联分析</title>
    <link href="https://kiki-github1.github.io/2022/01/04/%E5%85%B3%E8%81%94%E5%88%86%E6%9E%90/"/>
    <id>https://kiki-github1.github.io/2022/01/04/%E5%85%B3%E8%81%94%E5%88%86%E6%9E%90/</id>
    <published>2022-01-04T07:43:28.000Z</published>
    <updated>2022-01-07T05:49:24.029Z</updated>
    
    <content type="html"><![CDATA[<h1 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h1><p>缺失值统计</p><p>检测离群点</p><p>标准化或者正则化</p><p>特征编码</p><p>离散化数据</p><h1 id="划分数据集"><a href="#划分数据集" class="headerlink" title="划分数据集"></a>划分数据集</h1><p>划分测试集和训练集，其中训练集占70%左右。</p><h1 id="创建对应的模型"><a href="#创建对应的模型" class="headerlink" title="创建对应的模型"></a>创建对应的模型</h1><p>1.分类</p><p>2.关联</p><p>3.聚类</p><p>4.回归</p><p>5.集成</p><p>中的选一个对应题目，使用不同的算法。</p><h1 id="优化模型"><a href="#优化模型" class="headerlink" title="优化模型"></a>优化模型</h1><p>1.检测效果</p><blockquote><p>r2</p><p>roc曲线，auc值</p><p>混淆矩阵</p></blockquote><p>2.检测方法</p><blockquote><p>网格调参</p><p>交叉验证</p></blockquote><p>不同算法有不同的参数设置。</p><p>了解参数的意义。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;预处理&quot;&gt;&lt;a href=&quot;#预处理&quot; class=&quot;headerlink&quot; title=&quot;预处理&quot;&gt;&lt;/a&gt;预处理&lt;/h1&gt;&lt;p&gt;缺失值统计&lt;/p&gt;
&lt;p&gt;检测离群点&lt;/p&gt;
&lt;p&gt;标准化或者正则化&lt;/p&gt;
&lt;p&gt;特征编码&lt;/p&gt;
&lt;p&gt;离散化数据&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>分类器</title>
    <link href="https://kiki-github1.github.io/2022/01/03/%E5%88%86%E7%B1%BB%E5%99%A8/"/>
    <id>https://kiki-github1.github.io/2022/01/03/%E5%88%86%E7%B1%BB%E5%99%A8/</id>
    <published>2022-01-03T06:15:53.000Z</published>
    <updated>2022-01-03T09:58:52.961Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分类器"><a href="#分类器" class="headerlink" title="分类器"></a>分类器</h1><ul><li><p>基于规则的分类器</p></li><li><p>最近邻分类器</p></li><li><p>贝叶斯分类器</p><blockquote><p>朴素贝叶斯分类器</p><p>贝叶斯信念网络</p></blockquote></li></ul><h2 id="一-基于规则的分类器"><a href="#一-基于规则的分类器" class="headerlink" title="一.基于规则的分类器"></a>一.基于规则的分类器</h2><blockquote><h3 id="1-规则前件-》规则后件-简单的逻辑。通过联系判断"><a href="#1-规则前件-》规则后件-简单的逻辑。通过联系判断" class="headerlink" title="1.规则前件-》规则后件 简单的逻辑。通过联系判断"></a>1.规则前件-》规则后件 简单的逻辑。通过联系判断</h3><h3 id="2-原理："><a href="#2-原理：" class="headerlink" title="2.原理："></a>2.原理：</h3><blockquote><p>互斥规则：都是互相排斥的<br>穷举规则：拥有任意个组合<br>有序规则：通过优先级排序，会有一个决策表<br>无序规则：通过出发多个不同规则，产生投票。通过投票数量来决定类标号。</p></blockquote><h3 id="3-算法核心："><a href="#3-算法核心：" class="headerlink" title="3.算法核心："></a>3.算法核心：</h3><p>顺序覆盖算法：通过一步一步的查找，按照顺序覆盖类别。</p></blockquote><h2 id="二-最近邻分类器"><a href="#二-最近邻分类器" class="headerlink" title="二.最近邻分类器"></a>二.最近邻分类器</h2><blockquote><h3 id="1-最近邻分类器是什么？"><a href="#1-最近邻分类器是什么？" class="headerlink" title="1.最近邻分类器是什么？"></a>1.最近邻分类器是什么？</h3><blockquote><p>通过寻找测试集中属性相对接近的所有样例的分类器，</p><p>归纳步：通过数据集训练出模型</p><p>演绎步：通过测试集检验优化模型</p></blockquote><h3 id="2-算法"><a href="#2-算法" class="headerlink" title="2.算法"></a>2.算法</h3><blockquote><p>1.选取k的取值。k:表示要划分集合中元素的个数</p><p>2.通过划分边界获取的范围进行投票。</p><p>3.投票最多的属性，就是该划分区域的类别。</p></blockquote><h3 id="3-特征"><a href="#3-特征" class="headerlink" title="3.特征"></a>3.特征</h3><blockquote><p>1.消极学习方法不需要建立模型，分类测试的开销很大</p><p>2.是基于局部预测，对于噪声特别敏感。</p><p>3.可以生成任意形状的边界，提供更加灵活的模型表示。</p><p>4.要采用适当的预处理</p></blockquote></blockquote><h2 id="三-贝叶斯分类器"><a href="#三-贝叶斯分类器" class="headerlink" title="三.贝叶斯分类器"></a>三.贝叶斯分类器</h2><blockquote><h3 id="1-贝叶斯定理"><a href="#1-贝叶斯定理" class="headerlink" title="1.贝叶斯定理"></a>1.贝叶斯定理</h3><p>统计学中概念，是由贝叶斯定义的一种关于因果概率计算方法的定理。使用在条件概率中：</p><p>先验概率：在事件A发生的情况下，事件B会发生的概率。</p><p>后验概率：在事件B已经发生的情况下，原因事件A发生的概率。</p><h3 id="2-贝叶斯分类器的工作原理"><a href="#2-贝叶斯分类器的工作原理" class="headerlink" title="2.贝叶斯分类器的工作原理"></a>2.贝叶斯分类器的工作原理</h3><p>通过前后概率的联系，从而获取条件概率发生的情况。</p><p>1.首先通过已有数据集合，筛选不同属性下预测值的先验概率。</p><p>2.删除预测值</p><p>3.通过计算不同属性的的后验概率来构建树结构。</p><h3 id="3-朴素贝叶斯模型"><a href="#3-朴素贝叶斯模型" class="headerlink" title="3.朴素贝叶斯模型"></a>3.朴素贝叶斯模型</h3><p>通过贝叶斯定理找到使得预测概率最大的属性，然后确定主要原因的属性就够了。</p><p>原理和上述一样。</p><blockquote><p>连续数据：划出分区，通过概率论得知，通过拟合某种概率分布模型，这种概率模型通常是高斯分布，计算在某一区间的积分，就得出了其概率大小。</p><p>离散数据：通过数据集中离散数据统计得出即可。</p></blockquote><p>对于出现先验概率或者后验概率等于零的情况，可以使用m估计。他是一种健壮的概率估计方法。</p><p>计算误差：</p><p>​        通过计算两个属性正态分布下相交的积分数值。</p><h3 id="4-贝叶斯神经网络"><a href="#4-贝叶斯神经网络" class="headerlink" title="4.贝叶斯神经网络"></a>4.贝叶斯神经网络</h3><p>是一个有向无环图，</p><p>一个概率表，把各个节点连接在一起</p><blockquote><p>算法：</p><p>通过贝叶斯定理创建一个树形概率结构，每个节点有自己的概率表。</p></blockquote></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分类器&quot;&gt;&lt;a href=&quot;#分类器&quot; class=&quot;headerlink&quot; title=&quot;分类器&quot;&gt;&lt;/a&gt;分类器&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;基于规则的分类器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最近邻分类器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;贝叶斯分类器&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>分类：基本概念、决策树与模型估计</title>
    <link href="https://kiki-github1.github.io/2022/01/02/%E5%88%86%E7%B1%BB%EF%BC%9A%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E3%80%81%E5%86%B3%E7%AD%96%E6%A0%91%E4%B8%8E%E6%A8%A1%E5%9E%8B%E4%BC%B0%E8%AE%A1/"/>
    <id>https://kiki-github1.github.io/2022/01/02/%E5%88%86%E7%B1%BB%EF%BC%9A%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E3%80%81%E5%86%B3%E7%AD%96%E6%A0%91%E4%B8%8E%E6%A8%A1%E5%9E%8B%E4%BC%B0%E8%AE%A1/</id>
    <published>2022-01-02T13:59:24.933Z</published>
    <updated>2022-01-03T14:54:14.252Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分类：基本概念、决策树与模型估计"><a href="#分类：基本概念、决策树与模型估计" class="headerlink" title="分类：基本概念、决策树与模型估计"></a>分类：基本概念、决策树与模型估计</h1><blockquote><ul><li>预备知识</li><li>决策树归纳</li><li>模型过拟合</li><li>分类器的性能评估</li></ul></blockquote><p>目标：1.理解各项指标的作用</p><p>​            2.理解决策树的构造原理</p><p>​            3.实现决策树的优化</p><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><blockquote><h3 id="一-分类和回归的区别"><a href="#一-分类和回归的区别" class="headerlink" title="一.分类和回归的区别"></a>一.分类和回归的区别</h3><p>分类的数据是离散的，然而回归的数据是连续的。他们都是通过学习获得目标函数，对自变量输入数值得到预测结果，从而得到分类和回归的效果</p><h3 id="二-训练集和检验集"><a href="#二-训练集和检验集" class="headerlink" title="二.训练集和检验集"></a>二.训练集和检验集</h3><p>通过python中的sklearn包将数据分成两各部分。一般情况下，训练集占总共的[^2/3],测试集占[^1/3]。划分的目的是为了更加高效的训练和测试。在不断的情况下优化函数模型。</p><h3 id="三-混淆矩阵"><a href="#三-混淆矩阵" class="headerlink" title="三.混淆矩阵"></a>三.混淆矩阵</h3><p><img src="https://pic4.zhimg.com/80/v2-7537a55ed0b3259f132511736fa65baf_1440w.jpg"></p><ol><li><p>TP(True Positive)：将正类预测为正类数，真实为0，预测也为0</p></li><li><p>FN(False Negative)：将正类预测为负类数，真实为0，预测为1</p></li><li><p>FP(False Positive)：将负类预测为正类数， 真实为1，预测为0</p></li><li><p>TN(True Negative)：将负类预测为负类数，真实为1，预测也为1</p></li></ol><p>  <img src="https://pic1.zhimg.com/80/v2-3c2b09d5606e0be938814c10ca1e4394_1440w.jpg"></p><ol><li>精确率_类别1=a/(a+d+g)</li><li>召回率_类别1=a/(a+b+c)</li></ol></blockquote><h2 id="决策树归纳"><a href="#决策树归纳" class="headerlink" title="决策树归纳"></a>决策树归纳</h2><blockquote><h3 id="一-什么是决策树？"><a href="#一-什么是决策树？" class="headerlink" title="一.什么是决策树？"></a>一.什么是决策树？</h3><p>是一种分类数学模型。他包含了内部节点，叶子节点，根节点。是基于树模型的一种分类方法。通过不断的选择，最终将数据分类。</p><p><img src="https://tse1-mm.cn.bing.net/th/id/R-C.abf38e41a9788447638695a5f1c67bca?rik=vG0ASi0+XGzKzw&riu=http://upload-images.jianshu.io/upload_images/14645088-8935eb283349538f.png&ehk=P/Geb+XlGcURmYPN5CdEMtloSXEG4bFM6J70Cxcvjx0=&risl=&pid=ImgRaw&r=0"></p><h3 id="二-他的创建过程是怎么样的？"><a href="#二-他的创建过程是怎么样的？" class="headerlink" title="二.他的创建过程是怎么样的？"></a>二.他的创建过程是怎么样的？</h3><p>1.Hunt算法：</p><p>Hunt算法通过将训练记录相继划分为较纯的子集，以递归方式建立决策树。设Dt是与结点t相关联的训练记录集，而y = { y1, y2, …, yc}为类标号，Hunt算法的递归定义如下：<br>1.如果Dt中所有的记录都属于同一个类yt，则结点t是叶子结点，用yt标记；</p><p>2.如果Dt中包含多个类的记录，则选择一个属性测试条件，将记录划分为较小的子集。对于测试条件的每个输出，创建一个子女结点，并根据测试结果将Dt中的记录分布到子女结点中，然后对每个子女结点递归地调用该算法；</p><p>对于以上算法，如果属性值的每种组合都在训练集中出现，并且每种组合都具有唯一的类标号，则Hunt算法是有效的。但是但对于大多数的实际情况来讲，这一假设并不现实，因此，需要额外的条件来处理以下情况：<br>1.在第二步，算法所创建的子女结点可能为空，即不存在与这些结点相关联的记录。如果没有一个训练记录包含与这样的结点相关联的属性组合，这种情形就有可能发生。这时，该结点成为叶子结点，类标号为其父结点所关联记录集中类别个数最多的类别；</p><p>2.在第二步，如果与Dt相关联的所有记录都具有相同的属性值（类标号除外），则没有属性可用于进一步划分当前记录集，这时可以采用投票原则（少数服从多数）将当前结点强制为叶结点，其类标号为该结点所关联记录集中类别个数最多的类别；</p><h3 id="三-实现算法过程中的问题"><a href="#三-实现算法过程中的问题" class="headerlink" title="三.实现算法过程中的问题"></a>三.实现算法过程中的问题</h3><p>1.如何进行划分？</p><p>2.什么时候截止划分效果最好?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">后面会解答这几个问题。</span><br></pre></td></tr></table></figure><h3 id="四-属性测试条件的方法"><a href="#四-属性测试条件的方法" class="headerlink" title="四.属性测试条件的方法"></a>四.属性测试条件的方法</h3><p>二元属性：直接分为两份部分</p><p>标称属性：可以随便排列组合</p><p>序数属性：通常使用多路划分</p><p>连续属性：划分不同的区间来计算</p><h3 id="五-划分的指标"><a href="#五-划分的指标" class="headerlink" title="五.划分的指标"></a>五.划分的指标</h3><p>1.基尼值：越小越好</p><p>2.信息熵：越小越好</p><p>3.分类误差：越小越好</p><p>定义自行百度，马上考试了，，，，还在写博客，，，，，</p><p>4.增益率：越大越好</p></blockquote><h1 id="模型过拟合"><a href="#模型过拟合" class="headerlink" title="模型过拟合"></a>模型过拟合</h1><blockquote><h3 id="一-过拟合是什么？"><a href="#一-过拟合是什么？" class="headerlink" title="一.过拟合是什么？"></a>一.过拟合是什么？</h3><p>训练误差过高，泛化误差太大的结果。通俗的来说就是学的太像了，学习模板本来就很片面，导致未知数据分类的效果不好。</p><h3 id="二-如何解这个问题？"><a href="#二-如何解这个问题？" class="headerlink" title="二.如何解这个问题？"></a>二.如何解这个问题？</h3><p>1.剪树枝</p><blockquote><p>先剪枝：对于数据的分支导致剪掉该保留的部分，不该保存的就保持了。有过多的子树。容易导致过拟合，枝叶的阈值不好确定。</p><p>后剪枝：剪掉重复的子树，浪费了大量的计算。</p></blockquote><p>2.属性优化</p><blockquote><p>通过对选择属性进行分类，寻找到最好的分类属性。</p><p>通常剪枝叶的效果要好于属性优化。</p></blockquote></blockquote><h1 id="性能评估"><a href="#性能评估" class="headerlink" title="性能评估"></a>性能评估</h1><p>模型优化会在一个单独的主题设置。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分类：基本概念、决策树与模型估计&quot;&gt;&lt;a href=&quot;#分类：基本概念、决策树与模型估计&quot; class=&quot;headerlink&quot; title=&quot;分类：基本概念、决策树与模型估计&quot;&gt;&lt;/a&gt;分类：基本概念、决策树与模型估计&lt;/h1&gt;&lt;blockquote&gt;
&lt;ul&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数据探索期间的度量定义</title>
    <link href="https://kiki-github1.github.io/2022/01/01/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A003/"/>
    <id>https://kiki-github1.github.io/2022/01/01/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A003/</id>
    <published>2022-01-01T15:05:35.674Z</published>
    <updated>2022-01-03T14:45:28.863Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据挖掘期末复习"><a href="#数据挖掘期末复习" class="headerlink" title="数据挖掘期末复习"></a>数据挖掘期末复习</h1><p><em><strong>第三章的考试考点：数据探索期间的度量定义：</strong></em></p><p>要点：</p><ul><li>背背背！！！</li><li>背背背！！！</li><li>背背背！！！</li></ul><h2 id="数据探索"><a href="#数据探索" class="headerlink" title="数据探索"></a>数据探索</h2><blockquote><p>1.汇总统计：</p><ul><li>频率 </li></ul><blockquote><p>数据在集合中出现的次数</p></blockquote><ul><li>众数</li></ul><blockquote><p>最高频率的数</p></blockquote><ul><li>百分位数</li></ul><blockquote><p>例如:</p><p>第50个百分位数的值[^x50%] ,使得x的所有值的[^50%]小于[^x50%]</p></blockquote><ul><li>均值</li></ul><blockquote><p>均值是表示一组数据集中趋势的量数，是指在一组数据中所有数据之和再除以这组数据的个数。它是反映数据集中趋势的一项指标</p></blockquote><ul><li>中位数</li></ul><blockquote><p>值集位置的度量</p></blockquote><ul><li>极差</li></ul><blockquote><p>极差 又称范围误差或 全距 (Range)，以R表示，是用来表示统计资料中的 变异量数 (measures of variation)，其 最大值 与最小值之间的 差距 ，即<strong>最大值减最小值后所得之数据</strong>。</p></blockquote><ul><li>方差</li></ul><blockquote><p>方差是在<strong>概率论和统计方差衡量 随机变量 或一组数据时离散程度的度量</strong>。 概率论中方差用来度量 随机变量 和其 数学期望 （即 均值 ）之间的偏离程度。</p></blockquote><ul><li>协方差矩阵</li></ul><blockquote><p>在统计学与概率论中，协方差矩阵（也称离差矩阵、方差-协方差矩阵）是一个矩阵，其i, j 位置的元素是第i 个与第j 个随机变量之间的协方差。 这是从标量随机变量到高维度随机向量的自然推广。</p></blockquote><ul><li>相关矩阵</li></ul><blockquote><p>相关矩阵也叫相<strong>关系数矩阵，</strong>其是由矩阵各列间的 相关系数 构成的。 也就是说，相关矩阵第i行第j列的元素是原矩阵第i列和第j列的相关系数。 相关矩阵的对角元素是1。 相关矩阵是对称矩阵。</p></blockquote><ul><li>倾斜度</li></ul><blockquote><p>分布在均值附近的程度</p></blockquote></blockquote><p>结束，加油：</p><p><img src="01.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据挖掘期末复习&quot;&gt;&lt;a href=&quot;#数据挖掘期末复习&quot; class=&quot;headerlink&quot; title=&quot;数据挖掘期末复习&quot;&gt;&lt;/a&gt;数据挖掘期末复习&lt;/h1&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;第三章的考试考点：数据探索期间的度量定义：&lt;/strong&gt;&lt;/em</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>第一次拥有个人博客</title>
    <link href="https://kiki-github1.github.io/2022/01/01/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <id>https://kiki-github1.github.io/2022/01/01/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</id>
    <published>2022-01-01T09:00:46.000Z</published>
    <updated>2022-01-01T09:30:27.116Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建个人博客的第一天"><a href="#创建个人博客的第一天" class="headerlink" title="创建个人博客的第一天"></a>创建个人博客的第一天</h1><ul><li>对于搭建的感想</li><li>对于自己搭建个人博客的期望</li><li>对于自己推广博客的方法  </li></ul><hr><h2 id="对于搭建的感想"><a href="#对于搭建的感想" class="headerlink" title="对于搭建的感想"></a><em>对于搭建的感想</em></h2><p><img src="https://tse1-mm.cn.bing.net/th/id/R-C.b714f5562cbdb605c8f48cac7b313986?rik=SVkpHTJSKHTxzg&riu=http://img95.699pic.com/photo/50099/0108.jpg_wh860.jpg&ehk=4YcnMWGRiyvxJFncX4US5U5Q6U2o5+E/gNnNhh5q0qA=&risl=&pid=ImgRaw&r=0"></p><p>&nbsp;&nbsp;在经历过半天后，终于解决了一系列的问题，自己的博客终于搭建完成了。其实一开始觉得还是CSDN这个平台还是可以的，但是上面的限制不太满足我的需求。搭建一个白嫖网站还真是难。没办法，生活就是这样，便宜的大多数没有好东西。但是白嫖的感觉还是香的。</p><h2 id="搭建博客对自己的期望"><a href="#搭建博客对自己的期望" class="headerlink" title="搭建博客对自己的期望"></a><em>搭建博客对自己的期望</em></h2><ol><li>提升自己技术能力     </li></ol><ul><li>java</li><li>python数据分析</li><li>机器学习</li><li>脚本开发</li><li>最终实现大数据工程师</li></ul><h2 id="对于自己推广博客的方法"><a href="#对于自己推广博客的方法" class="headerlink" title="对于自己推广博客的方法"></a><em>对于自己推广博客的方法</em></h2><ul><li>自己的哔哩哔哩账户</li><li>其他</li></ul><p>今天就简单的介绍到这里了，<br>这是我第一个博客文章，明天开始添加自己的考研复习总结<br><img src="https://tse1-mm.cn.bing.net/th/id/R-C.a70c46857afe33c743e84e83aea48697?rik=Mi2Yy7fW3OcVBA&riu=http://uploads.xuexila.com/allimg/1901/1192-1Z126145230420.jpg&ehk=zHIeOQRbsC5UyFpTO+HXzPr3lUueN4upsAdn+qFph9Y=&risl=&pid=ImgRaw&r=0"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;创建个人博客的第一天&quot;&gt;&lt;a href=&quot;#创建个人博客的第一天&quot; class=&quot;headerlink&quot; title=&quot;创建个人博客的第一天&quot;&gt;&lt;/a&gt;创建个人博客的第一天&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;对于搭建的感想&lt;/li&gt;
&lt;li&gt;对于自己搭建个人博客的期望&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://kiki-github1.github.io/2021/12/31/hello-world/"/>
    <id>https://kiki-github1.github.io/2021/12/31/hello-world/</id>
    <published>2021-12-31T14:57:37.285Z</published>
    <updated>2022-01-01T08:04:59.636Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
